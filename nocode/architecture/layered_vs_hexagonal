Layered Architecture

A layered architecture organizes software elements into layers. Each layer has a well-defined set of responsibilities.
A layered architecture also constraints the dependencies between the layers. A layer can only depend on either the layer
immediately below it (if strict layering) or any of the layers below it.

3-Tier Architecture, as an example for layered architecture, includes:

- Presentation layer —Contains code that implements the user interface or external APIs
- Business logic layer—Contains the business logic
- Persistence layer—Implements the logic of interacting with the database

Drawbacks

- Single presentation layer: It doesn’t represent the fact that an application is likely to be invoked by more than just
a single system.
- Single persistence layer: It doesn’t represent the fact that an application is likely to interact with more than just
a single database.
- Defines the business logic layer as depending on the persistence layer: In theory, this dependency prevents you from testing the business logic without the database.

Also, the layered architecture misrepresents the dependencies in a well-designed application. The business logic
typically defines an interface or a repository of interfaces that define data access methods. The persistence tier
defines DAO classes that implement the repository interfaces. In other words, the dependencies are the reverse of what’s depicted by a layered architecture.

Hexagonal Architecture

Hexagonal architecture is an alternative to the layered architectural style. The hexagonal architecture style organizes
the logical view in a way that places the business logic at the center. Instead of the presentation layer, the
application has one or more inbound adapters that handle requests from the outside by invoking the business logic. Similarly, instead of a data persistence tier, the application has one or more outbound adapters that are invoked by the business logic and invoke external applications. A key characteristic and benefit of this architecture is that the
business logic doesn’t depend on the adapters. Instead, they depend upon it. The business logic has one or more ports. A port defines a set of operations and is how the business logic interacts with what’s outside of it.

An important benefit of the hexagonal architectural style is that it decouples the business logic from the presentation
and data access logic in the adapters. The business logic doesn’t depend on either the presentation logic or the data access logic. Because of this decoupling, it’s much easier to test the business logic in isolation. Another benefit is
that it more accurately reflects the architecture of a modern application. The business logic can be invoked via
multiple adapters, each of which implements a particular API or UI. The business logic can also invoke multiple
adapters, each one of which invokes a different external system. Hexagonal architecture is a great way to describe the architecture of each service in a microservice architecture.