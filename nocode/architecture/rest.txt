- Designing REST API's
    - Identifying objects used as resource.
    - Documentation.
    - Define data format i.e. json, xml, yaml.
    - Define URI's.
        - use nouns over verbs.
        - use plural form.
        - use sub-resources for relations i.e. playlist/{id}/song
        - use hyphens.
        - use lower-case.
    - Define methods/verbs. (post, get, put, patch, delete, head, options) (get, put, delete idempotent)
    - Decide on versioning i.e. either in URI or Custom Headers.
    - Handle error properly and use http error codes.

- Architectural Constraints
    - Uniform Interface: All clients should be able to interact with the REST API in the same manner, whether the client
      is a browser, a mobile app, or something else. The REST API is usually accessible at a single URL
      (uniform resource locator) — for example, “https://api.example.com.”
    - Caching: REST servers can cache data by designating it as cacheable with the Cache-Control HTTP header. The cached
      result is ready for reuse when there is an equivalent request later on.
    - Layered: The REST client does not know (and does not need to know) if it is communicating with an intermediary
      layer in the architecture, or with the server itself.
    - Client-Server: In REST APIs, the client and server are two separate entities. Concerns about the API interface are
      separate from concerns about how the underlying data is stored and retrieved.
    - Stateless: REST requests must be stateless; the server does not have to remember any details about the client’s
      state. This means that the client must include all necessary information within each API request it makes.
    - Code on Demand: The client can optionally download code such as a JavaScript script or Java applet in order to
      extend its functionality at runtime.
